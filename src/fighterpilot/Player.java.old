package fighterpilot;

import level.Chunk;
import level.Sprite;
import physics.Physics;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import gameEvent.AI;
import physics.Collidable;
import gameEvent.Controllable;

public class Player extends Sprite implements AI, Controllable, Physics, Collidable {

    public boolean moveUp, moveDown, moveLeft, moveRight, fire;//static

    private Rectangle hitbox;
    private Chunk[][] chunkMatrix;

    private boolean fireProjectile;

    private int coolDown = 100;
    private int currentCoolDown = 0;

    private double speed;

    private BufferedImage img;
    /**Creates new Player
     * 
     * @param name Name of Player
     * @param id ID of Player
     * @param data_value Data Value
     * @param x X position
     * @param y Y position
     */
    public Player(String name, int id, int data_value, double x, double y) {//nidxy
	super(name,id,data_value,x,y);
	this.speed = 0.01;

	try{
	    img = ImageIO.read(new File("FighterPilotImages/Ship.png"));
	} catch(IOException e){
	    System.err.println(e);
	    img = new BufferedImage(8, 8, BufferedImage.OPAQUE);//8x8 is default size
	}

	hitbox = new Rectangle(img.getWidth(), img.getHeight());
    }
    /**Creates new Player
     * 
     * @param name NAme of Player
     * @param id ID of player
     * @param data_value Data VAlue
     * @param x X Position
     * @param y Y Position
     * @param speed Speed of Player
     */
    public Player(String name, int id, int data_value, double x, double y, double speed) {//nidxy
	super(name,id,data_value,x,y);
	this.speed = speed;

	try{
	    img = ImageIO.read(new File("FighterPilotImages/Ship.png"));
	} catch(IOException e){
	    System.out.println(e);
	    img = new BufferedImage(8, 8, BufferedImage.OPAQUE);//8x8 is default size
	}
	
	hitbox = new Rectangle(img.getWidth(), img.getHeight());
    }

    @Override
    public void doAI() {
	if(moveUp){
	    loc.y -= speed; 
	}else if(moveDown){
	    loc.y += speed;
	}

	if(moveLeft){
	    loc.x -= speed;
	}else if(moveRight){
	    loc.x += speed;
	}

	currentCoolDown++;
	if(fire){
	    if(currentCoolDown >= coolDown){
		currentCoolDown = 0;
		fireProjectile = true;
	    }
	}
    }

    public BufferedImage getImage(){
	return img;

    }
    
    public boolean isDead() {
	return false;
    }

    @Override
    public void updateChunk(Chunk[][] c) {
	// TODO Auto-generated method stub
	chunkMatrix = c;
    }

    @Override
    public boolean hasChildren() {
	return fireProjectile;
    }

    @Override
    public Sprite getChildren() {

	//return null;
	if(fireProjectile == true){
	    fireProjectile = false;
	    return new Projectile("PlayerSpawn", 0, 0, this.loc.x + 1.5, this.loc.y + 0.5, 0.01, 0.0);
	}
	return null;
    }

    @Override
    public void doPhysics() {
	// TODO Auto-generated method stub

    }

    @Override
    public BufferedImage getShadowMask() {
	// TODO Auto-generated method stub
	return null;
    }
    @Override
    public Rectangle getHitbox(){
	//HitBox is not adjusted for coordinates, since that would make global Collision detection easier and also would fix the problem of not seeing the location in the level.
	return hitbox;
    }
    @Override
    public void doCollision(Collidable c) {
	// TODO Auto-generated method stub
	
	//System.out.println("Player was hit by " + c);
	
    }
    





}
